/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_structures_2eproto__INCLUDED
#define PROTOBUF_C_structures_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _Log Log;
typedef struct _Contract Contract;
typedef struct _BlockRange BlockRange;
typedef struct _Result Result;
typedef struct _Report Report;


/* --- enums --- */


/* --- messages --- */

struct  _Log
{
  ProtobufCMessage base;
  protobuf_c_boolean has_magic;
  uint32_t magic;
  char *sender_id;
  protobuf_c_boolean has_severity;
  uint32_t severity;
  protobuf_c_boolean has_timestamp_sec;
  uint32_t timestamp_sec;
  protobuf_c_boolean has_timestamp_usec;
  uint32_t timestamp_usec;
  char *message;
};
#define LOG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&log__descriptor) \
    , 0,0, NULL, 0,0, 0,0, 0,0, NULL }


struct  _Contract
{
  ProtobufCMessage base;
  protobuf_c_boolean has_magic;
  uint32_t magic;
  char *path;
  size_t n_types;
  int32_t *types;
  protobuf_c_boolean has_is_contiguous;
  protobuf_c_boolean is_contiguous;
  protobuf_c_boolean has_absolute_offset;
  int64_t absolute_offset;
  protobuf_c_boolean has_sleep;
  int32_t sleep;
};
#define CONTRACT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contract__descriptor) \
    , 0,0, NULL, 0,NULL, 0,0, 0,0, 0,0 }


struct  _BlockRange
{
  ProtobufCMessage base;
  protobuf_c_boolean has_magic;
  uint32_t magic;
  protobuf_c_boolean has_offset;
  uint64_t offset;
  protobuf_c_boolean has_length;
  uint64_t length;
};
#define BLOCK_RANGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&block_range__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Result
{
  ProtobufCMessage base;
  protobuf_c_boolean has_magic;
  uint32_t magic;
  size_t n_block_ranges;
  BlockRange **block_ranges;
  char *data_description;
  char *brief_data_description;
  protobuf_c_boolean has_confidence;
  int32_t confidence;
  char *subcontractor_name;
  size_t n_new_contracts;
  Contract **new_contracts;
};
#define RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&result__descriptor) \
    , 0,0, 0,NULL, NULL, NULL, 0,0, NULL, 0,NULL }


struct  _Report
{
  ProtobufCMessage base;
  protobuf_c_boolean has_magic;
  uint32_t magic;
  Contract *original_contract;
  size_t n_results;
  Result **results;
};
#define REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&report__descriptor) \
    , 0,0, NULL, 0,NULL }


/* Log methods */
void   log__init
                     (Log         *message);
size_t log__get_packed_size
                     (const Log   *message);
size_t log__pack
                     (const Log   *message,
                      uint8_t             *out);
size_t log__pack_to_buffer
                     (const Log   *message,
                      ProtobufCBuffer     *buffer);
Log *
       log__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   log__free_unpacked
                     (Log *message,
                      ProtobufCAllocator *allocator);
/* Contract methods */
void   contract__init
                     (Contract         *message);
size_t contract__get_packed_size
                     (const Contract   *message);
size_t contract__pack
                     (const Contract   *message,
                      uint8_t             *out);
size_t contract__pack_to_buffer
                     (const Contract   *message,
                      ProtobufCBuffer     *buffer);
Contract *
       contract__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contract__free_unpacked
                     (Contract *message,
                      ProtobufCAllocator *allocator);
/* BlockRange methods */
void   block_range__init
                     (BlockRange         *message);
size_t block_range__get_packed_size
                     (const BlockRange   *message);
size_t block_range__pack
                     (const BlockRange   *message,
                      uint8_t             *out);
size_t block_range__pack_to_buffer
                     (const BlockRange   *message,
                      ProtobufCBuffer     *buffer);
BlockRange *
       block_range__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   block_range__free_unpacked
                     (BlockRange *message,
                      ProtobufCAllocator *allocator);
/* Result methods */
void   result__init
                     (Result         *message);
size_t result__get_packed_size
                     (const Result   *message);
size_t result__pack
                     (const Result   *message,
                      uint8_t             *out);
size_t result__pack_to_buffer
                     (const Result   *message,
                      ProtobufCBuffer     *buffer);
Result *
       result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   result__free_unpacked
                     (Result *message,
                      ProtobufCAllocator *allocator);
/* Report methods */
void   report__init
                     (Report         *message);
size_t report__get_packed_size
                     (const Report   *message);
size_t report__pack
                     (const Report   *message,
                      uint8_t             *out);
size_t report__pack_to_buffer
                     (const Report   *message,
                      ProtobufCBuffer     *buffer);
Report *
       report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   report__free_unpacked
                     (Report *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Log_Closure)
                 (const Log *message,
                  void *closure_data);
typedef void (*Contract_Closure)
                 (const Contract *message,
                  void *closure_data);
typedef void (*BlockRange_Closure)
                 (const BlockRange *message,
                  void *closure_data);
typedef void (*Result_Closure)
                 (const Result *message,
                  void *closure_data);
typedef void (*Report_Closure)
                 (const Report *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor log__descriptor;
extern const ProtobufCMessageDescriptor contract__descriptor;
extern const ProtobufCMessageDescriptor block_range__descriptor;
extern const ProtobufCMessageDescriptor result__descriptor;
extern const ProtobufCMessageDescriptor report__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_structures_2eproto__INCLUDED */
